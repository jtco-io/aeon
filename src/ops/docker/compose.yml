version: '3.4'
services:
  frontend:
    container_name: frontend
    image: registry.gitlab.com/jtco-io/jtx/frontend
    build:
      context: ../../client
      # These are env variables the client will get bundled with
      # All other Node.JS process respect server environment variables
      # as set in the environment attribute
      args:
        PROJECT_TITLE: "${PROJECT_TITLE}"
    restart: always
    depends_on:
    - backend
    - proxy
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      PROJECT_TITLE: ${PROJECT_TITLE}
      FRONTEND_HOST: ${DOCKER_CLIENT_PROXY_HOST}
      FRONTEND_PORT: "${FRONTEND_PORT}"
      # Here we use the internal ip of the graphql host to
      # avoid hitting WAN, Another option is to set the docker host attr.
      BACKEND_HOST: backend
      BACKEND_PORT: "${BACKEND_PORT}"
      PUBLIC_PATH: "${PUBLIC_PATH}"
    labels:
      traefik.enable: 'true'
      traefik.port: "${FRONTEND_PORT}"
      traefik.frontend.rule: "Host:${DOCKER_CLIENT_PROXY_HOST}"

  backend:
    container_name: backend
    image: registry.gitlab.com/jtco-io/jtx/backend
    build:
      context: ../../server
    restart: always
    ports:
    - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
        BACKEND_HOST: 0.0.0.0
        BACKEND_PORT: "${BACKEND_PORT}"

  proxy:
    container_name: proxy
    image: traefik
    restart: always
    ports:
        - 80:80
        - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      -c /dev/null
      --web
      --docker
      --docker.exposedbydefault=false
      --docker.watch
      --docker.domain=lemnos.local
      --entrypoints='Name:http Address::80'
      --defaultEntryPoints="http"
      --logLevel="INFO"


